swagger: "2.0"
info:
  description: "This is a sample server Parttore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Swagger AutoParts"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "partstore.swagger.io"
basePath: "/v2"
tags:
  - name: "part"
    description: "Everything about your AutoParts"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "store"
    description: "Access to Partstore orders"
  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"

paths:
  /part:
    post:
      tags:
        - "part"
      summary: "Add a new part to the store"
      description: ""
      operationId: "addPart"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Part object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Part"
      responses:
        "405":
          description: "Invalid input"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"
    put:
      tags:
        - "part"
      summary: "Update an existing part"
      description: ""
      operationId: "updatePart"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Part object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Part"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Part not found"
        "405":
          description: "Validation exception"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"
  /part/find:
    get:
      tags:
        - "part"
      summary: "Finds Parts by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPartsByStatus"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Part"
        "400":
          description: "Invalid status value"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"
  /part/{partId}:
    get:
      tags:
        - "part"
      summary: "Find part by ID"
      description: "Returns a single part"
      operationId: "getPartById"
      produces:
        - "application/json"
      parameters:
        - name: "partId"
          in: "path"
          description: "ID of part to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Part"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Part not found"
      security:
        - api_key: [ ]
    post:
      tags:
        - "part"
      summary: "Updates a part in the store with form data"
      description: ""
      operationId: "updatePartWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "partId"
          in: "path"
          description: "ID of part that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the part"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the part"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"
    delete:
      tags:
        - "part"
      summary: "Deletes a part"
      description: ""
      operationId: "deletePart"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "partId"
          in: "path"
          description: "Part id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Part not found"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"
  /part/{partId}/uploadImage:
    post:
      tags:
        - "part"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "partId"
          in: "path"
          description: "ID of part to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
      security:
        - partstore_auth:
            - "write:parts"
            - "read:parts"

  /store/inventory:
    get:
      tags:
        - "store"
      summary: "Returns part inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - api_key: [ ]
  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a part"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the part"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
        - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of part that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
        - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"

  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  partstore_auth:
    type: "oauth2"
    authorizationUrl: "http://partstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:parts: "modify parts in your account"
      read:parts: "read your parts"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      partId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      vin:
        type: string
      model:
        maxLength: 60
        minLength: 0
        type: string
      year:
        maximum: 4
        type: integer
        format: int32
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Part:
    type: "object"
    required:
      - "name"
    properties:
      category:
        $ref: "#/definitions/Category"
      status:
        type: "string"
        description: "part status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Part"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"